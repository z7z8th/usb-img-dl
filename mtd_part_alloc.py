from const_vars import *
from debug_util import *

# 1228 Partition =
IM9828_NAND_OFFSET = 0x0
IM9828_NAND_LENGTH = 0x20000000


# DYN_ID =
DYN_ID_INIT_OFFSET = 0x00020000
DYN_ID_INIT_LENGTH = (15*0x00020000)
DYN_ID_SIZE = 0x00020000

# IMEI =
IMEI_SECTOR_NUM = 0x8    # 8
IMEI_SN_DATA_SIZE = 0x00000080
IMEIR_SN_SECTOR_SIZE = 0x00002000


# Default 1228 H/W Resource Allocation
# Old
# DYN_ID = Raw Data
OLD_IM9828_MISC_OFFSET = 0x00000000
OLD_IM9828_MISC_LENGTH = 0x00200000

# Raw = Data
OLD_PS_MODEM_OFFSET = 0x00200000
OLD_PS_MODEM_LENGTH = 0x00400000
OLD_BOOTIMG_OFFSET  = 0x00800000
OLD_BOOTIMG_LENGTH  = 0x00300000
OLD_RECOVERY_OFFSET = 0x00B00000
OLD_RECOVERY_LENGTH = 0x00300000

# Yaffs2 =
OLD_MDATA_OFFSET  = 0x00600000
OLD_MDATA_LENGTH  = 0x00200000
OLD_SYSTEM_OFFSET = 0x00E00000
OLD_SYSTEM_LENGTH = 0x08000000
OLD_UDATA_OFFSET  = 0x08E00000
OLD_UDATA_LENGTH  = 0x14000000
OLD_CACHE_OFFSET  = 0x1CE00000
OLD_CACHE_LENGTH  = 0x03000000

# New Allocation (bsp13)
#dyn_id
IM9828_MISC_OFFSET = 0x00000000
IM9828_MISC_LENGTH = 0x00200000
#raw
PS_MODEM_LENGTH    = 0x00800000
#yaffs2
MDATA_LENGTH       = 0x00200000
#raw
BOOTIMG_LENGTH     = 0x00400000
RECOVERY_LENGTH    = 0x00400000
#yaffs2
SYSTEM_LENGTH      = 0x10000000
UDATA_LENGTH       = 0x0BC00000

PS_MODEM_OFFSET = IM9828_MISC_OFFSET + IM9828_MISC_LENGTH
MDATA_OFFSET    = PS_MODEM_OFFSET + PS_MODEM_LENGTH
BOOTIMG_OFFSET  = MDATA_OFFSET + MDATA_LENGTH
RECOVERY_OFFSET = BOOTIMG_OFFSET + BOOTIMG_LENGTH
SYSTEM_OFFSET   = RECOVERY_OFFSET + RECOVERY_LENGTH
UDATA_OFFSET    = SYSTEM_OFFSET + SYSTEM_LENGTH
CACHE_OFFSET    = UDATA_OFFSET + UDATA_LENGTH
CACHE_LENGTH    = IM9828_NAND_LENGTH - CACHE_OFFSET




def use_bsp12_allocation():
    global IM9828_MISC_LENGTH
    global PS_MODEM_LENGTH 
    global MDATA_LENGTH 
    global BOOTIMG_LENGTH 
    global RECOVERY_LENGTH
    global SYSTEM_LENGTH  
    global UDATA_LENGTH
    #dyn_id
    IM9828_MISC_LENGTH = 0x00200000
    #raw
    PS_MODEM_LENGTH    = 0x00800000
    #yaffs2
    MDATA_LENGTH       = 0x00200000
    #raw
    BOOTIMG_LENGTH     = 0x00400000
    RECOVERY_LENGTH    = 0x00400000
    #yaffs2
    SYSTEM_LENGTH      = 0x08000000
    UDATA_LENGTH       = 0x13C00000

    update_allocation()


def use_bsp13_allocation():
    global IM9828_MISC_LENGTH
    global PS_MODEM_LENGTH 
    global MDATA_LENGTH 
    global BOOTIMG_LENGTH 
    global RECOVERY_LENGTH
    global SYSTEM_LENGTH  
    global UDATA_LENGTH
    #dyn_id
    IM9828_MISC_LENGTH = 0x00200000
    #raw
    PS_MODEM_LENGTH    = 0x00800000
    #yaffs2
    MDATA_LENGTH       = 0x00200000
    #raw
    BOOTIMG_LENGTH     = 0x00400000
    RECOVERY_LENGTH    = 0x00400000
    #yaffs2
    SYSTEM_LENGTH      = 0x10000000
    UDATA_LENGTH       = 0x0BC00000

    update_allocation()


def update_allocation():
    global PS_MODEM_OFFSET 
    global MDATA_OFFSET
    global BOOTIMG_OFFSET  
    global RECOVERY_OFFSET 
    global SYSTEM_OFFSET 
    global UDATA_OFFSET  
    global CACHE_OFFSET  
    global CACHE_LENGTH

    PS_MODEM_OFFSET = IM9828_MISC_OFFSET + IM9828_MISC_LENGTH
    MDATA_OFFSET    = PS_MODEM_OFFSET + PS_MODEM_LENGTH
    BOOTIMG_OFFSET  = MDATA_OFFSET + MDATA_LENGTH
    RECOVERY_OFFSET = BOOTIMG_OFFSET + BOOTIMG_LENGTH
    SYSTEM_OFFSET   = RECOVERY_OFFSET + RECOVERY_LENGTH
    UDATA_OFFSET    = SYSTEM_OFFSET + SYSTEM_LENGTH
    CACHE_OFFSET    = UDATA_OFFSET + UDATA_LENGTH
    CACHE_LENGTH    = IM9828_NAND_LENGTH - CACHE_OFFSET


def print_allocation():
    ALLOCATION_LIST = [
        ("IM9828_MISC_OFFSET", IM9828_MISC_OFFSET),
        ("IM9828_MISC_LENGTH", IM9828_MISC_LENGTH),
        ("PS_MODEM_OFFSET", PS_MODEM_OFFSET),
        ("PS_MODEM_LENGTH", PS_MODEM_LENGTH),
        ("MDATA_OFFSET", MDATA_OFFSET),
        ("MDATA_LENGTH", MDATA_LENGTH),
        ("BOOTIMG_OFFSET", BOOTIMG_OFFSET),
        ("BOOTIMG_LENGTH", BOOTIMG_LENGTH),
        ("RECOVERY_OFFSET", RECOVERY_OFFSET),
        ("RECOVERY_LENGTH", RECOVERY_LENGTH),
        ("SYSTEM_OFFSET", SYSTEM_OFFSET),
        ("SYSTEM_LENGTH", SYSTEM_LENGTH),
        ("UDATA_OFFSET", UDATA_OFFSET),
        ("UDATA_LENGTH", UDATA_LENGTH),
        ("CACHE_OFFSET", CACHE_OFFSET),
        ("CACHE_LENGTH", CACHE_LENGTH),
    ]
    for k in ALLOCATION_LIST:
        info("%s\t\t\t0x%.8X" % (k[0], k[1]))


if __name__ == "__main__":
    use_bsp12_allocation()
    print_allocation()
    print "-"*80
    use_bsp13_allocation()
    print_allocation()
